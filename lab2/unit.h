#ifndef UNIT_H
#define UNIT_H
#include <string>
#include <memory> //для использования умного указателя shared_ptr
using namespace std;

class Unit //абстрактный класс, содержащий чисто вирутальный метод, который будет переопределен в производных классах
{
public:
    using Flags = unsigned int; //индекс модификатора, передающий беззнаковое целое значение
    virtual ~Unit() = default; // Виртуальный деструктор по умолчанию

    virtual void add(const shared_ptr <Unit>&, Flags); //Виртуальный метод для добавления вложенных элементов, который принимает константную ссылку
    // на умный указатель shared_ptr, который указывает на объект типа Unit. Также эта функция принимает параметр Flags.

    virtual string compile(unsigned int level = 0) const = 0; //чисто виртуальный метод, генерирующий код на C++, соответствующий содержимому элемента.
    //Результат возвращается в виде строки. В качестве аргумента метод принимает параметр level - уровень вложенности узла дерева
    //для корректной расстановки отступов в начале строк генерируемого кода.

protected:
    virtual string generateShift(unsigned int level) const; // вирутальный метод возвращает строку, состоящую из нужного числа пробелов.
    // Тут const означает, что этот метод не изменяет состояние объекта класса, для которого он вызывается.
};



// shared_ptr <Unit> - умный указатель, который автоматически управляет временем жизни объекта типа Unit. Он предоставляет подсчет ссылок
// для отслеживания кол-ва владельцев объекта и автоматически удаляет объект, когда последний владелец перестает ссылаться на него.

#endif // UNIT_H
